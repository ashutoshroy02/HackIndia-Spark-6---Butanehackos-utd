from web3 import Web3

# Alchemy API URL for the Goerli testnet (or your chosen network)
alchemy_url = "https://eth-goerli.g.alchemy.com/v2/mMeCivUNUgLCEEw-xKcuBseYiBjYuaP9"
web3 = Web3(Web3.HTTPProvider(alchemy_url))

# Check if the connection is successful
if web3.isConnected():
    print("Connected to Ethereum via Alchemy!")
else:
    print("Connection failed")




contract_address = "6080604052348015600e575f5ffd5b50610c768061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c806376d91d081461004357806394f0df611461005f578063a0076e8414610090575b5f5ffd5b61005d600480360381019061005891906105c6565b6100c0565b005b6100796004803603810190610074919061069a565b6101b1565b604051610087929190610747565b60405180910390f35b6100aa60048036038101906100a59190610775565b61028f565b6040516100b791906108ec565b60405180910390f35b5f60405180604001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff1681525090505f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f0190816101649190610b09565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b5f602052815f5260405f2081815481106101c9575f80fd5b905f5260205f2090600202015f9150915050805f0180546101e990610939565b80601f016020809104026020016040519081016040528092919081815260200182805461021590610939565b80156102605780601f1061023757610100808354040283529160200191610260565b820191905f5260205f20905b81548152906001019060200180831161024357829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60608173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f690610c22565b60405180910390fd5b5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b8282101561046e578382905f5260205f2090600202016040518060400160405290815f8201805461038a90610939565b80601f01602080910402602001604051908101604052809291908181526020018280546103b690610939565b80156104015780601f106103d857610100808354040283529160200191610401565b820191905f5260205f20905b8154815290600101906020018083116103e457829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061035a565b505050509050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6104d882610492565b810181811067ffffffffffffffff821117156104f7576104f66104a2565b5b80604052505050565b5f610509610479565b905061051582826104cf565b919050565b5f67ffffffffffffffff821115610534576105336104a2565b5b61053d82610492565b9050602081019050919050565b828183375f83830152505050565b5f61056a6105658461051a565b610500565b9050828152602081018484840111156105865761058561048e565b5b61059184828561054a565b509392505050565b5f82601f8301126105ad576105ac61048a565b5b81356105bd848260208601610558565b91505092915050565b5f602082840312156105db576105da610482565b5b5f82013567ffffffffffffffff8111156105f8576105f7610486565b5b61060484828501610599565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106368261060d565b9050919050565b6106468161062c565b8114610650575f5ffd5b50565b5f813590506106618161063d565b92915050565b5f819050919050565b61067981610667565b8114610683575f5ffd5b50565b5f8135905061069481610670565b92915050565b5f5f604083850312156106b0576106af610482565b5b5f6106bd85828601610653565b92505060206106ce85828601610686565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61070a826106d8565b61071481856106e2565b93506107248185602086016106f2565b61072d81610492565b840191505092915050565b6107418161062c565b82525050565b5f6040820190508181035f83015261075f8185610700565b905061076e6020830184610738565b9392505050565b5f6020828403121561078a57610789610482565b5b5f61079784828501610653565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f6107e3826106d8565b6107ed81856107c9565b93506107fd8185602086016106f2565b61080681610492565b840191505092915050565b61081a8161062c565b82525050565b5f604083015f8301518482035f86015261083a82826107d9565b915050602083015161084f6020860182610811565b508091505092915050565b5f6108658383610820565b905092915050565b5f602082019050919050565b5f610883826107a0565b61088d81856107aa565b93508360208202850161089f856107ba565b805f5b858110156108da57848403895281516108bb858261085a565b94506108c68361086d565b925060208a019950506001810190506108a2565b50829750879550505050505092915050565b5f6020820190508181035f8301526109048184610879565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061095057607f821691505b6020821081036109635761096261090c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026109c57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261098a565b6109cf868361098a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610a0a610a05610a0084610667565b6109e7565b610667565b9050919050565b5f819050919050565b610a23836109f0565b610a37610a2f82610a11565b848454610996565b825550505050565b5f5f905090565b610a4e610a3f565b610a59818484610a1a565b505050565b5b81811015610a7c57610a715f82610a46565b600181019050610a5f565b5050565b601f821115610ac157610a9281610969565b610a9b8461097b565b81016020851015610aaa578190505b610abe610ab68561097b565b830182610a5e565b50505b505050565b5f82821c905092915050565b5f610ae15f1984600802610ac6565b1980831691505092915050565b5f610af98383610ad2565b9150826002028217905092915050565b610b12826106d8565b67ffffffffffffffff811115610b2b57610b2a6104a2565b5b610b358254610939565b610b40828285610a80565b5f60209050601f831160018114610b71575f8415610b5f578287015190505b610b698582610aee565b865550610bd0565b601f198416610b7f86610969565b5f5b82811015610ba657848901518255600182019150602085019450602081019050610b81565b86831015610bc35784890151610bbf601f891682610ad2565b8355505b6001600288020188555050505b505050505050565b7f4e6f7420617574686f72697a656420746f2076696577207265636f72647300005f82015250565b5f610c0c601e836106e2565b9150610c1782610bd8565b602082019050919050565b5f6020820190508181035f830152610c3981610c00565b905091905056fea26469706673582212203286ced1004c5f2a172b9056f5985ae811a8a8304936a00dd64d3a4fe180b9b864736f6c634300081b0033ss"
contract_abi = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_patient",
				"type": "address"
			}
		],
		"name": "getRecords",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "encryptedData",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "patient",
						"type": "address"
					}
				],
				"internalType": "struct MedicalRecords.Record[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "patientRecords",
		"outputs": [
			{
				"internalType": "string",
				"name": "encryptedData",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "patient",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_encryptedData",
				"type": "string"
			}
		],
		"name": "storeRecord",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]  # Replace with your contract's ABI

# Load the contract
contract = web3.eth.contract(address=contract_address, abi=contract_abi)

# Interact with the smart contract
def store_data_on_blockchain(encrypted_data):
    tx = contract.functions.storeRecord(encrypted_data).transact({
        'from': web3.eth.defaultAccount,  # Patient's account
        'gas': 2000000
    })
    receipt = web3.eth.waitForTransactionReceipt(tx)
    return receipt

encrypted_data = "YourEncryptedDataHere"
store_data_on_blockchain(encrypted_data)
